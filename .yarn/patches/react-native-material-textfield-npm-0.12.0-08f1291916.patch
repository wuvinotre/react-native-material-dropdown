diff --git a/src/components/affix/index.js b/src/components/affix/index.js
index d6c9d648c688b2bb311b522f1eade6ea4403e935..7abffca96c4c5092829e90aabe36778bfbd55578 100644
--- a/src/components/affix/index.js
+++ b/src/components/affix/index.js
@@ -1,8 +1,7 @@
-import PropTypes from 'prop-types';
-import React, { PureComponent } from 'react';
-import { Animated } from 'react-native';
+import React, { PureComponent } from "react";
+import { Animated } from "react-native";
 
-import styles from './styles';
+import styles from "./styles";
 
 export default class Affix extends PureComponent {
   static defaultProps = {
@@ -12,33 +11,13 @@ export default class Affix extends PureComponent {
     focused: false,
   };
 
-  static propTypes = {
-    numberOfLines: PropTypes.number,
-
-    active: PropTypes.bool,
-    focused: PropTypes.bool,
-
-    type: PropTypes.oneOf(['prefix', 'suffix']).isRequired,
-
-    fontSize: PropTypes.number.isRequired,
-    baseColor: PropTypes.string.isRequired,
-    animationDuration: PropTypes.number.isRequired,
-
-    style: Animated.Text.propTypes.style,
-
-    children: PropTypes.oneOfType([
-      PropTypes.arrayOf(PropTypes.node),
-      PropTypes.node,
-    ]),
-  };
-
   constructor(props) {
     super(props);
 
     let { active, focused } = this.props;
 
     this.state = {
-      opacity: new Animated.Value((active || focused)? 1 : 0),
+      opacity: new Animated.Value(active || focused ? 1 : 0),
     };
   }
 
@@ -46,13 +25,11 @@ export default class Affix extends PureComponent {
     let { opacity } = this.state;
     let { active, focused, animationDuration } = this.props;
 
-    if ((focused ^ props.focused) || (active ^ props.active)) {
-      Animated
-        .timing(opacity, {
-          toValue: (props.active || props.focused)? 1 : 0,
-          duration: animationDuration,
-        })
-        .start();
+    if (focused ^ props.focused || active ^ props.active) {
+      Animated.timing(opacity, {
+        toValue: props.active || props.focused ? 1 : 0,
+        duration: animationDuration,
+      }).start();
     }
   }
 
@@ -71,14 +48,14 @@ export default class Affix extends PureComponent {
     };
 
     switch (type) {
-      case 'prefix':
+      case "prefix":
         containerStyle.paddingRight = 8;
-        textStyle.textAlign = 'left';
+        textStyle.textAlign = "left";
         break;
 
-      case 'suffix':
+      case "suffix":
         containerStyle.paddingLeft = 8;
-        textStyle.textAlign = 'right';
+        textStyle.textAlign = "right";
         break;
     }
 
diff --git a/src/components/counter/index.js b/src/components/counter/index.js
index ad6e31336ce269841df7b22dac23b7a3bcd80849..362b555a745c718939a2d8528eb2fd8556f1ff3a 100644
--- a/src/components/counter/index.js
+++ b/src/components/counter/index.js
@@ -1,27 +1,14 @@
-import PropTypes from 'prop-types';
-import React, { PureComponent } from 'react';
-import { View, Text } from 'react-native';
+import React, { PureComponent } from "react";
+import { View, Text } from "react-native";
 
-import styles from './styles';
+import styles from "./styles";
 
 export default class Counter extends PureComponent {
-  static propTypes = {
-    count: PropTypes.number.isRequired,
-    limit: PropTypes.number,
-
-    fontSize: PropTypes.number,
-
-    baseColor: PropTypes.string.isRequired,
-    errorColor: PropTypes.string.isRequired,
-
-    style: Text.propTypes.style,
-  };
-
   render() {
     let { count, limit, baseColor, errorColor, fontSize, style } = this.props;
 
     let textStyle = {
-      color: count > limit? errorColor : baseColor,
+      color: count > limit ? errorColor : baseColor,
       fontSize,
     };
 
diff --git a/src/components/field/index.js b/src/components/field/index.js
index 52c1868a873be9747b4407ac78d6e6843a8ca753..c06e8e01bf20c3fdd667709ef3467f24ae1dbc86 100644
--- a/src/components/field/index.js
+++ b/src/components/field/index.js
@@ -1,5 +1,4 @@
-import PropTypes from 'prop-types';
-import React, { PureComponent } from 'react';
+import React, { PureComponent } from "react";
 import {
   View,
   Text,
@@ -7,25 +6,24 @@ import {
   Animated,
   StyleSheet,
   Platform,
-  ViewPropTypes,
   I18nManager,
-} from 'react-native';
+} from "react-native";
 
-import RN from 'react-native/package.json';
+import RN from "react-native/package.json";
 
-import Line from '../line';
-import Label from '../label';
-import Affix from '../affix';
-import Helper from '../helper';
-import Counter from '../counter';
+import Line from "../line";
+import Label from "../label";
+import Affix from "../affix";
+import Helper from "../helper";
+import Counter from "../counter";
 
-import styles from './styles.js';
+import styles from "./styles.js";
 
 export default class TextField extends PureComponent {
   static defaultProps = {
-    underlineColorAndroid: 'transparent',
+    underlineColorAndroid: "transparent",
     disableFullscreenUI: true,
-    autoCapitalize: 'sentences',
+    autoCapitalize: "sentences",
     editable: true,
 
     animationDuration: 225,
@@ -37,64 +35,20 @@ export default class TextField extends PureComponent {
     labelPadding: 4,
     inputContainerPadding: 8,
 
-    tintColor: 'rgb(0, 145, 234)',
-    textColor: 'rgba(0, 0, 0, .87)',
-    baseColor: 'rgba(0, 0, 0, .38)',
+    tintColor: "rgb(0, 145, 234)",
+    textColor: "rgba(0, 0, 0, .87)",
+    baseColor: "rgba(0, 0, 0, .38)",
 
-    errorColor: 'rgb(213, 0, 0)',
+    errorColor: "rgb(213, 0, 0)",
 
     lineWidth: StyleSheet.hairlineWidth,
     activeLineWidth: 2,
 
     disabled: false,
-    disabledLineType: 'dotted',
+    disabledLineType: "dotted",
     disabledLineWidth: 1,
   };
 
-  static propTypes = {
-    ...TextInput.propTypes,
-
-    animationDuration: PropTypes.number,
-
-    fontSize: PropTypes.number,
-    titleFontSize: PropTypes.number,
-    labelFontSize: PropTypes.number,
-    labelHeight: PropTypes.number,
-    labelPadding: PropTypes.number,
-    inputContainerPadding: PropTypes.number,
-
-    labelTextStyle: Text.propTypes.style,
-    titleTextStyle: Text.propTypes.style,
-    affixTextStyle: Text.propTypes.style,
-
-    tintColor: PropTypes.string,
-    textColor: PropTypes.string,
-    baseColor: PropTypes.string,
-
-    label: PropTypes.string.isRequired,
-    title: PropTypes.string,
-
-    characterRestriction: PropTypes.number,
-
-    error: PropTypes.string,
-    errorColor: PropTypes.string,
-
-    lineWidth: PropTypes.number,
-    activeLineWidth: PropTypes.number,
-
-    disabled: PropTypes.bool,
-    disabledLineType: Line.propTypes.type,
-    disabledLineWidth: PropTypes.number,
-
-    renderAccessory: PropTypes.func,
-
-    prefix: PropTypes.string,
-    suffix: PropTypes.string,
-
-    containerStyle: (ViewPropTypes || View.propTypes).style,
-    inputContainerStyle: (ViewPropTypes || View.propTypes).style,
-  };
-
   constructor(props) {
     super(props);
 
@@ -106,7 +60,7 @@ export default class TextField extends PureComponent {
     this.onContentSizeChange = this.onContentSizeChange.bind(this);
     this.onFocusAnimationEnd = this.onFocusAnimationEnd.bind(this);
 
-    this.updateRef = this.updateRef.bind(this, 'input');
+    this.updateRef = this.updateRef.bind(this, "input");
 
     let { value, error, fontSize } = this.props;
 
@@ -156,9 +110,9 @@ export default class TextField extends PureComponent {
     if (props.error !== error || focused ^ state.focused) {
       let toValue = this.focusState(props.error, state.focused);
 
-      Animated
-        .timing(focus, { toValue, duration })
-        .start(this.onFocusAnimationEnd);
+      Animated.timing(focus, { toValue, duration }).start(
+        this.onFocusAnimationEnd,
+      );
     }
   }
 
@@ -167,7 +121,7 @@ export default class TextField extends PureComponent {
   }
 
   focusState(error, focused) {
-    return error? -1 : (focused? 1 : 0);
+    return error ? -1 : focused ? 1 : 0;
   }
 
   focus() {
@@ -186,16 +140,16 @@ export default class TextField extends PureComponent {
     this.input.clear();
 
     /* onChangeText is not triggered by .clear() */
-    this.onChangeText('');
+    this.onChangeText("");
   }
 
   value() {
     let { text, receivedFocus } = this.state;
     let { value, defaultValue } = this.props;
 
-    return (receivedFocus || null != value || null == defaultValue)?
-      text:
-      defaultValue;
+    return receivedFocus || null != value || null == defaultValue
+      ? text
+      : defaultValue;
   }
 
   isFocused() {
@@ -204,7 +158,7 @@ export default class TextField extends PureComponent {
 
   isRestricted() {
     let { characterRestriction } = this.props;
-    let { text = '' } = this.state;
+    let { text = "" } = this.state;
 
     return characterRestriction < text.length;
   }
@@ -212,7 +166,7 @@ export default class TextField extends PureComponent {
   onFocus(event) {
     let { onFocus, clearTextOnFocus } = this.props;
 
-    if ('function' === typeof onFocus) {
+    if ("function" === typeof onFocus) {
       onFocus(event);
     }
 
@@ -226,7 +180,7 @@ export default class TextField extends PureComponent {
   onBlur(event) {
     let { onBlur } = this.props;
 
-    if ('function' === typeof onBlur) {
+    if ("function" === typeof onBlur) {
       onBlur(event);
     }
 
@@ -236,12 +190,12 @@ export default class TextField extends PureComponent {
   onChange(event) {
     let { onChange, multiline } = this.props;
 
-    if ('function' === typeof onChange) {
+    if ("function" === typeof onChange) {
       onChange(event);
     }
 
     /* XXX: onContentSizeChange is not called on RN 0.44 and 0.45 */
-    if (multiline && 'android' === Platform.OS) {
+    if (multiline && "android" === Platform.OS) {
       if (/^0\.4[45]\./.test(RN.version)) {
         this.onContentSizeChange(event);
       }
@@ -253,7 +207,7 @@ export default class TextField extends PureComponent {
 
     this.setState({ text });
 
-    if ('function' === typeof onChangeText) {
+    if ("function" === typeof onChangeText) {
       onChangeText(text);
     }
   }
@@ -262,14 +216,14 @@ export default class TextField extends PureComponent {
     let { onContentSizeChange, fontSize } = this.props;
     let { height } = event.nativeEvent.contentSize;
 
-    if ('function' === typeof onContentSizeChange) {
+    if ("function" === typeof onContentSizeChange) {
       onContentSizeChange(event);
     }
 
     this.setState({
       height: Math.max(
         fontSize * 1.5,
-        Math.ceil(height) + Platform.select({ ios: 5, android: 1 })
+        Math.ceil(height) + Platform.select({ ios: 5, android: 1 }),
       ),
     });
   }
@@ -283,15 +237,11 @@ export default class TextField extends PureComponent {
   renderAccessory() {
     let { renderAccessory } = this.props;
 
-    if ('function' !== typeof renderAccessory) {
+    if ("function" !== typeof renderAccessory) {
       return null;
     }
 
-    return (
-      <View style={styles.accessory}>
-        {renderAccessory()}
-      </View>
-    );
+    return <View style={styles.accessory}>{renderAccessory()}</View>;
   }
 
   renderAffix(type, active, focused) {
@@ -317,12 +267,22 @@ export default class TextField extends PureComponent {
     };
 
     return (
-      <Affix style={affixTextStyle} {...props}>{affix}</Affix>
+      <Affix style={affixTextStyle} {...props}>
+        {affix}
+      </Affix>
     );
   }
 
   render() {
-    let { receivedFocus, focus, focused, error, errored, height, text = '' } = this.state;
+    let {
+      receivedFocus,
+      focus,
+      focused,
+      error,
+      errored,
+      height,
+      text = "",
+    } = this.state;
     let {
       style: inputStyleOverrides,
       label,
@@ -360,65 +320,68 @@ export default class TextField extends PureComponent {
       height = props.height;
     }
 
-    let defaultVisible = !(receivedFocus || null != value || null == defaultValue);
+    let defaultVisible = !(
+      receivedFocus ||
+      null != value ||
+      null == defaultValue
+    );
 
-    value = defaultVisible?
-      defaultValue:
-      text;
+    value = defaultVisible ? defaultValue : text;
 
     let active = !!(value || props.placeholder);
     let count = value.length;
     let restricted = limit < count;
 
-    let textAlign = I18nManager.isRTL?
-      'right':
-      'left';
+    let textAlign = I18nManager.isRTL ? "right" : "left";
 
-    let borderBottomColor = restricted?
-      errorColor:
-      focus.interpolate({
-        inputRange: [-1, 0, 1],
-        outputRange: [errorColor, baseColor, tintColor],
-      });
+    let borderBottomColor = restricted
+      ? errorColor
+      : focus.interpolate({
+          inputRange: [-1, 0, 1],
+          outputRange: [errorColor, baseColor, tintColor],
+        });
 
-    let borderBottomWidth = restricted?
-      activeLineWidth:
-      focus.interpolate({
-        inputRange: [-1, 0, 1],
-        outputRange: [activeLineWidth, lineWidth, activeLineWidth],
-      });
+    let borderBottomWidth = restricted
+      ? activeLineWidth
+      : focus.interpolate({
+          inputRange: [-1, 0, 1],
+          outputRange: [activeLineWidth, lineWidth, activeLineWidth],
+        });
 
     let inputContainerStyle = {
       paddingTop: labelHeight,
       paddingBottom: inputContainerPadding,
 
-      ...(disabled?
-        { overflow: 'hidden' }:
-        { borderBottomColor, borderBottomWidth }),
-
-      ...(props.multiline?
-        { height: 'web' === Platform.OS ? 'auto' : labelHeight + inputContainerPadding + height }:
-        { height: labelHeight + inputContainerPadding + fontSize * 1.5 }),
+      ...(disabled
+        ? { overflow: "hidden" }
+        : { borderBottomColor, borderBottomWidth }),
+
+      ...(props.multiline
+        ? {
+            height:
+              "web" === Platform.OS
+                ? "auto"
+                : labelHeight + inputContainerPadding + height,
+          }
+        : { height: labelHeight + inputContainerPadding + fontSize * 1.5 }),
     };
 
     let inputStyle = {
       fontSize,
       textAlign,
 
-      color: (disabled || defaultVisible)?
-        baseColor:
-        textColor,
+      color: disabled || defaultVisible ? baseColor : textColor,
 
-      ...(props.multiline?
-        {
-          height: fontSize * 1.5 + height,
+      ...(props.multiline
+        ? {
+            height: fontSize * 1.5 + height,
 
-          ...Platform.select({
-            ios: { top: -1 },
-            android: { textAlignVertical: 'top' },
-          }),
-        }:
-        { height: fontSize * 1.5 }),
+            ...Platform.select({
+              ios: { top: -1 },
+              android: { textAlignVertical: "top" },
+            }),
+          }
+        : { height: fontSize * 1.5 }),
     };
 
     let errorStyle = {
@@ -429,12 +392,12 @@ export default class TextField extends PureComponent {
         outputRange: [1, 0, 0],
       }),
 
-      fontSize: title?
-        titleFontSize:
-        focus.interpolate({
-          inputRange:  [-1, 0, 1],
-          outputRange: [titleFontSize, 0, 0],
-        }),
+      fontSize: title
+        ? titleFontSize
+        : focus.interpolate({
+            inputRange: [-1, 0, 1],
+            outputRange: [titleFontSize, 0, 0],
+          }),
     };
 
     let titleStyle = {
@@ -449,22 +412,21 @@ export default class TextField extends PureComponent {
     };
 
     let helperContainerStyle = {
-      flexDirection: 'row',
-      height: (title || limit)?
-        titleFontSize * 2:
-        focus.interpolate({
-          inputRange:  [-1, 0, 1],
-          outputRange: [titleFontSize * 2, 8, 8],
-        }),
+      flexDirection: "row",
+      height:
+        title || limit
+          ? titleFontSize * 2
+          : focus.interpolate({
+              inputRange: [-1, 0, 1],
+              outputRange: [titleFontSize * 2, 8, 8],
+            }),
     };
 
     let containerProps = {
       style: containerStyle,
       onStartShouldSetResponder: () => true,
       onResponderRelease: this.onPress,
-      pointerEvents: !disabled && editable?
-        'auto':
-        'none',
+      pointerEvents: !disabled && editable ? "auto" : "none",
     };
 
     let inputContainerProps = {
@@ -514,14 +476,12 @@ export default class TextField extends PureComponent {
           <Label {...labelProps}>{label}</Label>
 
           <View style={styles.row}>
-            {this.renderAffix('prefix', active, focused)}
+            {this.renderAffix("prefix", active, focused)}
 
             <TextInput
               style={[styles.input, inputStyle, inputStyleOverrides]}
               selectionColor={tintColor}
-
               {...props}
-
               editable={!disabled && editable}
               onChange={this.onChange}
               onChangeText={this.onChangeText}
@@ -532,7 +492,7 @@ export default class TextField extends PureComponent {
               ref={this.updateRef}
             />
 
-            {this.renderAffix('suffix', active, focused)}
+            {this.renderAffix("suffix", active, focused)}
             {this.renderAccessory()}
           </View>
         </Animated.View>
diff --git a/src/components/helper/index.js b/src/components/helper/index.js
index 60184eae99c1795e95e5dc807e5520641cecf9b8..7c57742d5ef84f5ca7956e8d74575adcdccc7e02 100644
--- a/src/components/helper/index.js
+++ b/src/components/helper/index.js
@@ -1,22 +1,13 @@
-import PropTypes from 'prop-types';
-import React, { PureComponent } from 'react';
-import { View, Animated } from 'react-native';
+import React, { PureComponent } from "react";
+import { View, Animated } from "react-native";
 
-import styles from './styles';
+import styles from "./styles";
 
 export default class Helper extends PureComponent {
   static defaultProps = {
     numberOfLines: 1,
   };
 
-  static propTypes = {
-    style: Animated.Text.propTypes.style,
-    children: PropTypes.oneOfType([
-      PropTypes.arrayOf(PropTypes.node),
-      PropTypes.node,
-    ]),
-  };
-
   render() {
     let { children, style, ...props } = this.props;
 
diff --git a/src/components/label/index.js b/src/components/label/index.js
index ac3ed53812b466944ed97bc416a1d7b417e078f9..f2979fac8a873f425bd0e90aa199da27efaf1735 100644
--- a/src/components/label/index.js
+++ b/src/components/label/index.js
@@ -1,6 +1,5 @@
-import PropTypes from 'prop-types';
-import React, { PureComponent } from 'react';
-import { Animated } from 'react-native';
+import React, { PureComponent } from "react";
+import { Animated } from "react-native";
 
 export default class Label extends PureComponent {
   static defaultProps = {
@@ -12,31 +11,6 @@ export default class Label extends PureComponent {
     restricted: false,
   };
 
-  static propTypes = {
-    active: PropTypes.bool,
-    focused: PropTypes.bool,
-    errored: PropTypes.bool,
-    restricted: PropTypes.bool,
-
-    baseSize: PropTypes.number.isRequired,
-    fontSize: PropTypes.number.isRequired,
-    activeFontSize: PropTypes.number.isRequired,
-    basePadding: PropTypes.number.isRequired,
-
-    tintColor: PropTypes.string.isRequired,
-    baseColor: PropTypes.string.isRequired,
-    errorColor: PropTypes.string.isRequired,
-
-    animationDuration: PropTypes.number.isRequired,
-
-    style: Animated.Text.propTypes.style,
-
-    children: PropTypes.oneOfType([
-      PropTypes.arrayOf(PropTypes.node),
-      PropTypes.node,
-    ]),
-  };
-
   constructor(props) {
     super(props);
 
@@ -53,26 +27,22 @@ export default class Label extends PureComponent {
     if (focused ^ props.focused || active ^ props.active) {
       let toValue = this.inputState(props);
 
-      Animated
-        .timing(input, { toValue, duration })
-        .start();
+      Animated.timing(input, { toValue, duration }).start();
     }
 
     if (focused ^ props.focused || errored ^ props.errored) {
       let toValue = this.focusState(props);
 
-      Animated
-        .timing(focus, { toValue, duration })
-        .start();
+      Animated.timing(focus, { toValue, duration }).start();
     }
   }
 
   inputState({ focused, active } = this.props) {
-    return active || focused? 1 : 0;
+    return active || focused ? 1 : 0;
   }
 
   focusState({ focused, errored } = this.props) {
-    return errored? -1 : (focused? 1 : 0);
+    return errored ? -1 : focused ? 1 : 0;
   }
 
   render() {
@@ -89,18 +59,18 @@ export default class Label extends PureComponent {
       basePadding,
       style,
       errored,
-      active, 
+      active,
       focused,
       animationDuration,
       ...props
     } = this.props;
 
-    let color = restricted?
-      errorColor:
-      focus.interpolate({
-        inputRange: [-1, 0, 1],
-        outputRange: [errorColor, baseColor, tintColor],
-      });
+    let color = restricted
+      ? errorColor
+      : focus.interpolate({
+          inputRange: [-1, 0, 1],
+          outputRange: [errorColor, baseColor, tintColor],
+        });
 
     let top = input.interpolate({
       inputRange: [0, 1],
@@ -120,7 +90,7 @@ export default class Label extends PureComponent {
     };
 
     let containerStyle = {
-      position: 'absolute',
+      position: "absolute",
       top,
     };
 
diff --git a/src/components/line/index.js b/src/components/line/index.js
index 4f1074a8b86a9799dbae6d6ad1696f1c41e1e9f0..993d7f519a00cf2bb68ab7f29873ddf437af0805 100644
--- a/src/components/line/index.js
+++ b/src/components/line/index.js
@@ -1,16 +1,9 @@
-import PropTypes from 'prop-types';
-import React, { PureComponent } from 'react';
-import { View } from 'react-native';
+import React, { PureComponent } from "react";
+import { View } from "react-native";
 
-import styles from './styles';
+import styles from "./styles";
 
 export default class Line extends PureComponent {
-  static propTypes = {
-    type: PropTypes.oneOf(['solid', 'dotted', 'dashed', 'none']).isRequired,
-    width: PropTypes.number.isRequired,
-    color: PropTypes.string.isRequired,
-  };
-
   render() {
     let {
       width: borderWidth,
@@ -18,12 +11,13 @@ export default class Line extends PureComponent {
       type: borderStyle,
     } = this.props;
 
-    if ('none' === borderStyle) {
+    if ("none" === borderStyle) {
       return null;
     }
 
-    let [top, right, bottom, left] = [-2, -1.5, 0, -1.5]
-      .map((value) => value * borderWidth);
+    let [top, right, bottom, left] = [-2, -1.5, 0, -1.5].map(
+      (value) => value * borderWidth,
+    );
 
     let lineStyle = {
       borderColor,
@@ -35,8 +29,6 @@ export default class Line extends PureComponent {
       borderWidth,
     };
 
-    return (
-      <View style={[styles.line, lineStyle]} pointerEvents='none' />
-    );
+    return <View style={[styles.line, lineStyle]} pointerEvents="none" />;
   }
 }
